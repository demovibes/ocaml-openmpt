/*
 * openmpt.idl - IDL for openmpt.h, version 0.3.0+
 *  Greg Kennedy <kennedy.greg@gmail.com> and the Demovibes Team, 2018
 */

quote(c, "#include <libopenmpt/libopenmpt.h>");
quote(c, "#include <libopenmpt/libopenmpt_stream_callbacks_buffer.h>");
quote(c, "#include <libopenmpt/libopenmpt_stream_callbacks_file.h>");
quote(c, "#include <libopenmpt/libopenmpt_stream_callbacks_fd.h>");

// Get the libopenmpt version number
unsigned int openmpt_get_library_version();

// Get the core version number
unsigned int openmpt_get_core_version();

// Free a string returned by libopenmpt
//  NOTE: this is never used directly by OCaml
//  Instead, it is called by various cleanup functions during dealloc
//void openmpt_free_string( [in] const char * str );

// Get library related metadata.
#if 0
[string] const char * openmpt_get_string( [in,string] const char * key )
	quote(dealloc, "openmpt_free_string(_res); ");

// Get a list of supported file extensions
[string] const char * openmpt_get_supported_extensions()
	quote(dealloc, "openmpt_free_string(_res); ");

// Query whether a file extension is supported
int openmpt_is_extension_supported( [in,string] const char * extension );

/*
// Seek to the given offset relative to the beginning of the file.
#define OPENMPT_STREAM_SEEK_SET 0
// Seek to the given offset relative to the current position in the file.
#define OPENMPT_STREAM_SEEK_CUR 1
// Seek to the given offset relative to the end of the file.
#define OPENMPT_STREAM_SEEK_END 2
*/

/* NOTE
 *  The next function pointer typedefs are supposed to allow you to supply a "custom" function
 *  to read, seek, or tell in a module.  For example, you could use it to read from a ZIP file
 *  or network stream.  However, this is tricky to do via OCaml... so it is not supported here.
 *
 * As an alternative, there are pre-built functions for doing file, filedescriptor, and memory-buffer
 *  reading of a module file.  Use one of these instead.
 */

//typedef size_t (*openmpt_stream_read_func)( void * stream, void * dst, size_t bytes );
//typedef int (*openmpt_stream_seek_func)( void * stream, int64 offset, int whence );
//typedef int64 (*openmpt_stream_tell_func)( void * stream );
/*
typedef struct openmpt_stream_callbacks {
	openmpt_stream_read_func read;
	openmpt_stream_seek_func seek;
	openmpt_stream_tell_func tell;
} openmpt_stream_callbacks;
*/

/* NOTE
 *  The logging function can be overridden by a custom logging function in the OpenMPT library.
 *  Again, this is too complicated for OCaml... so it is not supported here.
 *  Use the default logging function instead.
 */
//typedef void (*openmpt_log_func)( const char * message, void * user );

// Default logging function
//void openmpt_log_func_default( const char * message, void * user );

// Silent logging function
//void openmpt_log_func_silent( const char * message, void * user );

/*! No error. \since 0.3.0 */
#define OPENMPT_ERROR_OK                     0

/*! Lowest value libopenmpt will use for any of its own error codes. \since 0.3.0 */
#define OPENMPT_ERROR_BASE                   256

/*! Unknown internal error. \since 0.3.0 */
#define OPENMPT_ERROR_UNKNOWN                ( OPENMPT_ERROR_BASE +   1 )

/*! Unknown internal C++ exception. \since 0.3.0 */
#define OPENMPT_ERROR_EXCEPTION              ( OPENMPT_ERROR_BASE +  11 )

/*! Out of memory. \since 0.3.0 */
#define OPENMPT_ERROR_OUT_OF_MEMORY          ( OPENMPT_ERROR_BASE +  21 )

/*! Runtime error. \since 0.3.0 */
#define OPENMPT_ERROR_RUNTIME                ( OPENMPT_ERROR_BASE +  30 )
/*! Range error. \since 0.3.0 */
#define OPENMPT_ERROR_RANGE                  ( OPENMPT_ERROR_BASE +  31 )
/*! Arithmetic overflow. \since 0.3.0 */
#define OPENMPT_ERROR_OVERFLOW               ( OPENMPT_ERROR_BASE +  32 )
/*! Arithmetic underflow. \since 0.3.0 */
#define OPENMPT_ERROR_UNDERFLOW              ( OPENMPT_ERROR_BASE +  33 )

/*! Logic error. \since 0.3.0 */
#define OPENMPT_ERROR_LOGIC                  ( OPENMPT_ERROR_BASE +  40 )
/*! Value domain error. \since 0.3.0 */
#define OPENMPT_ERROR_DOMAIN                 ( OPENMPT_ERROR_BASE +  41 )
/*! Maximum supported size exceeded. \since 0.3.0 */
#define OPENMPT_ERROR_LENGTH                 ( OPENMPT_ERROR_BASE +  42 )
/*! Argument out of range. \since 0.3.0 */
#define OPENMPT_ERROR_OUT_OF_RANGE           ( OPENMPT_ERROR_BASE +  43 )
/*! Invalid argument. \since 0.3.0 */
#define OPENMPT_ERROR_INVALID_ARGUMENT       ( OPENMPT_ERROR_BASE +  44 )

/*! General libopenmpt error. \since 0.3.0 */
#define OPENMPT_ERROR_GENERAL                ( OPENMPT_ERROR_BASE + 101 )
/*! openmpt_module * is invalid. \since 0.3.0 */
#define OPENMPT_ERROR_INVALID_MODULE_POINTER ( OPENMPT_ERROR_BASE + 102 )
/*! NULL pointer argument. \since 0.3.0 */
#define OPENMPT_ERROR_ARGUMENT_NULL_POINTER  ( OPENMPT_ERROR_BASE + 103 )

// Check whether the error is transient
int openmpt_error_is_transient( [in] int error );

// Convert error code to text
[string] const char * openmpt_error_string( [in] int error )
	quote(dealloc, "openmpt_free_string(_res); ");

/*! Do not log or store the error. \since 0.3.0 */
#define OPENMPT_ERROR_FUNC_RESULT_NONE    0
/*! Log the error. \since 0.3.0 */
#define OPENMPT_ERROR_FUNC_RESULT_LOG     ( 1 << 0 )
/*! Store the error. \since 0.3.0 */
#define OPENMPT_ERROR_FUNC_RESULT_STORE   ( 1 << 1 )
/*! Log and store the error. \since 0.3.0 */
#define OPENMPT_ERROR_FUNC_RESULT_DEFAULT ( OPENMPT_ERROR_FUNC_RESULT_LOG | OPENMPT_ERROR_FUNC_RESULT_STORE )

/* NOTE
 *  The error function can be overridden by a custom error function in the OpenMPT library.
 *  Again, this is too complicated for OCaml... so it is not supported here.
 *  Use the default error function instead.
 */
//typedef int (*openmpt_error_func)( int error, void * user );

// Default error function
//int openmpt_error_func_default( int error, void * user );

// Log error function
//int openmpt_error_func_log( int error, void * user );

// Store error function
//int openmpt_error_func_store( int error, void * user );

// Ignore error function
//int openmpt_error_func_ignore( int error, void * user );

// Errno error function
//int openmpt_error_func_errno( int error, void * user );

// User pointer for openmpt_error_func_errno
//void * openmpt_error_func_errno_userdata( int * error );

// Roughly scan the input stream to find out whether libopenmpt might be able to open it
//  Three versions of this are provided, one each for mem-buffer, file descriptor, and file struct.
double openmpt_could_open_probability_buffer( [in] const unsigned char * stream, double effort, [out] int * error, [out,string] char * error_message )
	quote(call, "openmpt_could_open_probability2(openmpt_stream_get_buffer_callbacks(), stream, effort, &libopenmpt_default_logfunc, NULL, &openmpt_error_func_default, NULL, error, &error_message ); ");
double openmpt_could_open_probability_fd( [in] unsigned int stream, double effort, [out] int * error, [out,string] char * error_message )
	quote(call, "openmpt_could_open_probability2(openmpt_stream_get_fd_callbacks(), &stream, effort, &libopenmpt_default_logfunc, NULL, &openmpt_error_func_default, NULL, error, &error_message ); ");
/* double openmpt_could_open_probability_file( [in] FILE * stream, double effort, [out] int * error, [out,string] char * error_message )
	quote(call, "openmpt_could_open_probability2(openmpt_stream_get_buffer_callbacks(), stream, effort, &libopenmpt_default_logfunc, NULL, &openmpt_error_func_default, NULL, error, &error_message ); "); */

// Get recommended header size for successfull format probing
unsigned int openmpt_probe_file_header_get_recommended_size();

/*
// Probe for module formats in openmpt_probe_file_header() or openmpt_probe_file_header_without_filesize(). \since 0.3.0
#define OPENMPT_PROBE_FILE_HEADER_FLAGS_MODULES    0x1ul
// Probe for module-specific container formats in openmpt_probe_file_header() or openmpt_probe_file_header_without_filesize(). \since 0.3.0
#define OPENMPT_PROBE_FILE_HEADER_FLAGS_CONTAINERS 0x2ul

// Probe for the default set of formats in openmpt_probe_file_header() or openmpt_probe_file_header_without_filesize(). \since 0.3.0
#define OPENMPT_PROBE_FILE_HEADER_FLAGS_DEFAULT    ( OPENMPT_PROBE_FILE_HEADER_FLAGS_MODULES | OPENMPT_PROBE_FILE_HEADER_FLAGS_CONTAINERS )
// Probe for no formats in openmpt_probe_file_header() or openmpt_probe_file_header_without_filesize(). \since 0.3.0
#define OPENMPT_PROBE_FILE_HEADER_FLAGS_NONE       0x0ul

// Possible return values fo openmpt_probe_file_header() and openmpt_probe_file_header_without_filesize(). \since 0.3.0
#define OPENMPT_PROBE_FILE_HEADER_RESULT_SUCCESS      1
// Possible return values fo openmpt_probe_file_header() and openmpt_probe_file_header_without_filesize(). \since 0.3.0
#define OPENMPT_PROBE_FILE_HEADER_RESULT_FAILURE      0
// Possible return values fo openmpt_probe_file_header() and openmpt_probe_file_header_without_filesize(). \since 0.3.0
#define OPENMPT_PROBE_FILE_HEADER_RESULT_WANTMOREDATA (-1)
// Possible return values fo openmpt_probe_file_header() and openmpt_probe_file_header_without_filesize(). \since 0.3.0
#define OPENMPT_PROBE_FILE_HEADER_RESULT_ERROR        (-255)
*/

/*! \brief Probe the provided bytes from the beginning of a file for supported file format headers to find out whether libopenmpt might be able to open it
 *
 * \param flags Ored mask of OPENMPT_PROBE_FILE_HEADER_FLAGS_MODULES and OPENMPT_PROBE_FILE_HEADER_FLAGS_CONTAINERS, or OPENMPT_PROBE_FILE_HEADER_FLAGS_DEFAULT.
 * \param data Beginning of the file data.
 * \param size Size of the beginning of the file data.
 * \param filesize Full size of the file data on disk.
 * \param logfunc Logging function where warning and errors are written. May be NULL.
 * \param loguser Logging function user context. Used to pass any user-defined data associated with this module to the logging function.
 * \param errfunc Error function to define error behaviour. May be NULL.
 * \param erruser Error function user context. Used to pass any user-defined data associated with this module to the logging function.
 * \param error Pointer to an integer where an error may get stored. May be NULL.
 * \param error_message Pointer to a string pointer where an error message may get stored. May be NULL.
 * \remarks It is recommended to provide openmpt_probe_file_header_get_recommended_size() bytes of data for data and size. If the file is smaller, only provide the filesize amount and set size and filesize to the file's size. 
 * \remarks openmpt_could_open_probability2() provides a more elaborate interface that might be required for special use cases. It is recommended to use openmpt_probe_file_header() though, if possible.
 * \retval OPENMPT_PROBE_FILE_HEADER_RESULT_SUCCESS The file will most likely be supported by libopenmpt.
 * \retval OPENMPT_PROBE_FILE_HEADER_RESULT_FAILURE The file is not supported by libopenmpt.
 * \retval OPENMPT_PROBE_FILE_HEADER_RESULT_WANTMOREDATA An answer could not be determined with the amount of data provided.
 * \retval OPENMPT_PROBE_FILE_HEADER_RESULT_ERROR An internal error occurred.
 * \sa openmpt_probe_file_header_get_recommended_size()
 * \sa openmpt_probe_file_header_without_filesize()
 * \sa openmpt_probe_file_header_from_stream()
 * \sa openmpt_could_open_probability2()
 * \since 0.3.0
 */
int openmpt_probe_file_header( unsigned int64 flags, const void * data, size_t size, unsigned int64 filesize, openmpt_log_func logfunc, void * loguser, openmpt_error_func errfunc, void * erruser, int * error, const char * * error_message );
/*! \brief Probe the provided bytes from the beginning of a file for supported file format headers to find out whether libopenmpt might be able to open it
 *
 * \param flags Ored mask of OPENMPT_PROBE_FILE_HEADER_FLAGS_MODULES and OPENMPT_PROBE_FILE_HEADER_FLAGS_CONTAINERS, or OPENMPT_PROBE_FILE_HEADER_FLAGS_DEFAULT.
 * \param data Beginning of the file data.
 * \param size Size of the beginning of the file data.
 * \param logfunc Logging function where warning and errors are written. May be NULL.
 * \param loguser Logging function user context. Used to pass any user-defined data associated with this module to the logging function.
 * \param errfunc Error function to define error behaviour. May be NULL.
 * \param erruser Error function user context. Used to pass any user-defined data associated with this module to the logging function.
 * \param error Pointer to an integer where an error may get stored. May be NULL.
 * \param error_message Pointer to a string pointer where an error message may get stored. May be NULL.
 * \remarks It is recommended to use openmpt_probe_file_header() and provide the acutal file's size as a parameter if at all possible. libopenmpt can provide more accurate answers if the filesize is known.
 * \remarks It is recommended to provide openmpt_probe_file_header_get_recommended_size() bytes of data for data and size. If the file is smaller, only provide the filesize amount and set size to the file's size. 
 * \remarks openmpt_could_open_probability2() provides a more elaborate interface that might be required for special use cases. It is recommended to use openmpt_probe_file_header() though, if possible.
 * \retval OPENMPT_PROBE_FILE_HEADER_RESULT_SUCCESS The file will most likely be supported by libopenmpt.
 * \retval OPENMPT_PROBE_FILE_HEADER_RESULT_FAILURE The file is not supported by libopenmpt.
 * \retval OPENMPT_PROBE_FILE_HEADER_RESULT_WANTMOREDATA An answer could not be determined with the amount of data provided.
 * \retval OPENMPT_PROBE_FILE_HEADER_RESULT_ERROR An internal error occurred.
 * \sa openmpt_probe_file_header_get_recommended_size()
 * \sa openmpt_probe_file_header()
 * \sa openmpt_probe_file_header_from_stream()
 * \sa openmpt_could_open_probability2()
 * \since 0.3.0
 */
int openmpt_probe_file_header_without_filesize( unsigned int64 flags, const void * data, size_t size, openmpt_log_func logfunc, void * loguser, openmpt_error_func errfunc, void * erruser, int * error, const char * * error_message );

/*! \brief Probe the provided bytes from the beginning of a file for supported file format headers to find out whether libopenmpt might be able to open it
 *
 * \param flags Ored mask of OPENMPT_PROBE_FILE_HEADER_FLAGS_MODULES and OPENMPT_PROBE_FILE_HEADER_FLAGS_CONTAINERS, or OPENMPT_PROBE_FILE_HEADER_FLAGS_DEFAULT.
 * \param stream_callbacks Input stream callback operations.
 * \param stream Input stream to scan.
 * \param logfunc Logging function where warning and errors are written. May be NULL.
 * \param loguser Logging function user context. Used to pass any user-defined data associated with this module to the logging function.
 * \param errfunc Error function to define error behaviour. May be NULL.
 * \param erruser Error function user context. Used to pass any user-defined data associated with this module to the logging function.
 * \param error Pointer to an integer where an error may get stored. May be NULL.
 * \param error_message Pointer to a string pointer where an error message may get stored. May be NULL.
 * \remarks The stream is left in an unspecified state when this function returns.
 * \remarks It is recommended to provide openmpt_probe_file_header_get_recommended_size() bytes of data for data and size. If the file is smaller, only provide the filesize amount and set size and filesize to the file's size. 
 * \remarks openmpt_could_open_probability2() provides a more elaborate interface that might be required for special use cases. It is recommended to use openmpt_probe_file_header() though, if possible.
 * \retval OPENMPT_PROBE_FILE_HEADER_RESULT_SUCCESS The file will most likely be supported by libopenmpt.
 * \retval OPENMPT_PROBE_FILE_HEADER_RESULT_FAILURE The file is not supported by libopenmpt.
 * \retval OPENMPT_PROBE_FILE_HEADER_RESULT_WANTMOREDATA An answer could not be determined with the amount of data provided.
 * \retval OPENMPT_PROBE_FILE_HEADER_RESULT_ERROR An internal error occurred.
 * \sa openmpt_probe_file_header_get_recommended_size()
 * \sa openmpt_probe_file_header()
 * \sa openmpt_probe_file_header_without_filesize()
 * \sa openmpt_could_open_probability2()
 * \since 0.3.0
 */
int openmpt_probe_file_header_from_stream( unsigned int64 flags, openmpt_stream_callbacks stream_callbacks, void * stream, openmpt_log_func logfunc, void * loguser, openmpt_error_func errfunc, void * erruser, int * error, const char * * error_message );


/*! \brief Opaque type representing a libopenmpt module
 */
typedef struct openmpt_module openmpt_module;

typedef struct openmpt_module_initial_ctl {
	const char * ctl;
	const char * value;
} openmpt_module_initial_ctl;

/*! \brief Construct an openmpt_module
 *
 * \param stream_callbacks Input stream callback operations.
 * \param stream Input stream to load the module from.
 * \param logfunc Logging function where warning and errors are written. The logging function may be called throughout the lifetime of openmpt_module. May be NULL.
 * \param loguser User-defined data associated with this module. This value will be passed to the logging callback function (logfunc)
 * \param errfunc Error function to define error behaviour. May be NULL.
 * \param erruser Error function user context. Used to pass any user-defined data associated with this module to the logging function.
 * \param error Pointer to an integer where an error may get stored. May be NULL.
 * \param error_message Pointer to a string pointer where an error message may get stored. May be NULL.
 * \param ctls A map of initial ctl values. See openmpt_module_get_ctls()
 * \return A pointer to the constructed openmpt_module, or NULL on failure.
 * \remarks The input data can be discarded after an openmpt_module has been constructed successfully.
 * \sa openmpt_stream_callbacks
 * \sa \ref libopenmpt_c_fileio
 * \since 0.3.0
 */
openmpt_module * openmpt_module_create2( openmpt_stream_callbacks stream_callbacks, void * stream, openmpt_log_func logfunc, void * loguser, openmpt_error_func errfunc, void * erruser, int * error, const char * * error_message, const openmpt_module_initial_ctl * ctls );

/*! \brief Construct an openmpt_module
 *
 * \param filedata Data to load the module from.
 * \param filesize Amount of data available.
 * \param logfunc Logging function where warning and errors are written. The logging function may be called throughout the lifetime of openmpt_module.
 * \param loguser User-defined data associated with this module. This value will be passed to the logging callback function (logfunc)
 * \param errfunc Error function to define error behaviour. May be NULL.
 * \param erruser Error function user context. Used to pass any user-defined data associated with this module to the logging function.
 * \param error Pointer to an integer where an error may get stored. May be NULL.
 * \param error_message Pointer to a string pointer where an error message may get stored. May be NULL.
 * \param ctls A map of initial ctl values. See openmpt_module_get_ctls()
 * \return A pointer to the constructed openmpt_module, or NULL on failure.
 * \remarks The input data can be discarded after an openmpt_module has been constructed successfully.
 * \sa \ref libopenmpt_c_fileio
 * \since 0.3.0
 */
openmpt_module * openmpt_module_create_from_memory2( const void * filedata, size_t filesize, openmpt_log_func logfunc, void * loguser, openmpt_error_func errfunc, void * erruser, int * error, const char * * error_message, const openmpt_module_initial_ctl * ctls );

/*! \brief Unload a previously created openmpt_module from memory.
 *
 * \param mod The module to unload.
 */
void openmpt_module_destroy( openmpt_module * mod );

/*! \brief Set logging function.
 *
 * Set the logging function of an already constructed openmpt_module.
 * \param mod The module handle to work on.
 * \param logfunc Logging function where warning and errors are written. The logging function may be called throughout the lifetime of openmpt_module.
 * \param loguser User-defined data associated with this module. This value will be passed to the logging callback function (logfunc)
 * \since 0.3.0
 */
void openmpt_module_set_log_func( openmpt_module * mod, openmpt_log_func logfunc, void * loguser );

/*! \brief Set error function.
 *
 * Set the error function of an already constructed openmpt_module.
 * \param mod The module handle to work on.
 * \param errfunc Error function to define error behaviour. May be NULL.
 * \param erruser Error function user context.
 * \since 0.3.0
 */
void openmpt_module_set_error_func( openmpt_module * mod, openmpt_error_func errfunc, void * erruser );

/*! \brief Get last error.
 *
 * Return the error currently stored in an openmpt_module. The stored error is not cleared.
 * \param mod The module handle to work on.
 * \return The error currently stored.
 * \sa openmpt_module_error_get_last_message
 * \sa openmpt_module_error_set_last
 * \sa openmpt_module_error_clear
 * \since 0.3.0
 */
int openmpt_module_error_get_last( openmpt_module * mod );

/*! \brief Get last error message.
 *
 * Return the error message currently stored in an openmpt_module. The stored error is not cleared.
 * \param mod The module handle to work on.
 * \return The error message currently stored.
 * \sa openmpt_module_error_set_last
 * \sa openmpt_module_error_clear
 * \since 0.3.0
 */
const char * openmpt_module_error_get_last_message( openmpt_module * mod );

/*! \brief Set last error.
 *
 * Set the error currently stored in an openmpt_module.
 * \param mod The module handle to work on.
 * \param error Error to be stored.
 * \sa openmpt_module_error_get_last
 * \sa openmpt_module_error_clear
 * \since 0.3.0
 */
void openmpt_module_error_set_last( openmpt_module * mod, int error );

/*! \brief Clear last error.
 *
 * Set the error currently stored in an openmpt_module to OPPENMPT_ERROR_OK.
 * \param mod The module handle to work on.
 * \sa openmpt_module_error_get_last
 * \sa openmpt_module_error_set_last
 * \since 0.3.0
 */
void openmpt_module_error_clear( openmpt_module * mod );

/**
 * \defgroup openmpt_module_render_param Render param indices
 *
 * \brief Parameter index to use with openmpt_module_get_render_param() and openmpt_module_set_render_param()
 * @{
 */
/*! \brief Master Gain
 *
 * The related value represents a relative gain in milliBel.\n
 * The default value is 0.\n
 * The supported value range is unlimited.\n
 */
#define OPENMPT_MODULE_RENDER_MASTERGAIN_MILLIBEL        1
/*! \brief Stereo Separation
 *
 * The related value represents the stereo separation generated by the libopenmpt mixer in percent.\n
 * The default value is 100.\n
 * The supported value range is [0,200].\n
 */
#define OPENMPT_MODULE_RENDER_STEREOSEPARATION_PERCENT   2
/*! \brief Interpolation Filter
 *
 * The related value represents the interpolation filter length used by the libopenmpt mixer.\n
 * The default value is 0, which indicates a recommended default value.\n
 * The supported value range is [0,inf). Values greater than the implementation limit are clamped to the maximum supported value.\n
 * Currently supported values:
 *  - 0: internal default
 *  - 1: no interpolation (zero order hold)
 *  - 2: linear interpolation
 *  - 4: cubic interpolation
 *  - 8: windowed sinc with 8 taps
 */
#define OPENMPT_MODULE_RENDER_INTERPOLATIONFILTER_LENGTH 3
/*! \brief Volume Ramping Strength
 *
 * The related value represents the amount of volume ramping done by the libopenmpt mixer.\n
 * The default value is -1, which indicates a recommended default value.\n
 * The meaningful value range is [-1..10].\n
 * A value of 0 completely disables volume ramping. This might cause clicks in sound output.\n
 * Higher values imply slower/softer volume ramps.
 */
#define OPENMPT_MODULE_RENDER_VOLUMERAMPING_STRENGTH     4
/** @}*/

/**
 * \defgroup openmpt_module_command_index Pattern cell indices
 *
 * \brief Parameter index to use with openmpt_module_get_pattern_row_channel_command(), openmpt_module_format_pattern_row_channel_command() and openmpt_module_highlight_pattern_row_channel_command()
 * @{
 */
#define OPENMPT_MODULE_COMMAND_NOTE         0
#define OPENMPT_MODULE_COMMAND_INSTRUMENT   1
#define OPENMPT_MODULE_COMMAND_VOLUMEEFFECT 2
#define OPENMPT_MODULE_COMMAND_EFFECT       3
#define OPENMPT_MODULE_COMMAND_VOLUME       4
#define OPENMPT_MODULE_COMMAND_PARAMETER    5
/** @}*/

/*! \brief Select a sub-song from a multi-song module
 *
 * \param mod The module handle to work on.
 * \param subsong Index of the sub-song. -1 plays all sub-songs consecutively.
 * \return 1 on success, 0 on failure.
 * \sa openmpt_module_get_num_subsongs, openmpt_module_get_selected_subsong, openmpt_module_get_subsong_name
 * \remarks Whether subsong -1 (all subsongs consecutively), subsong 0 or some other subsong is selected by default, is an implementation detail and subject to change. If you do not want to care about subsongs, it is recommended to just not call openmpt_module_select_subsong() at all.
 */
int openmpt_module_select_subsong( openmpt_module * mod, int32 subsong );
/*! \brief Get currently selected sub-song from a multi-song module
 *
 * \param mod The module handle to work on.
 * \return Currently selected sub-song. -1 for all subsongs consecutively, 0 or greater for the current sub-song index.
 * \sa openmpt_module_get_num_subsongs, openmpt_module_select_subsong, openmpt_module_get_subsong_name
 * \since 0.3.0
 */
int32 openmpt_module_get_selected_subsong( openmpt_module * mod );
/*! \brief Set Repeat Count
 *
 * \param mod The module handle to work on.
 * \param repeat_count Repeat Count
 *   - -1: repeat forever
 *   - 0: play once, repeat zero times (the default)
 *   - n>0: play once and repeat n times after that
 * \return 1 on success, 0 on failure.
 * \sa openmpt_module_get_repeat_count
 */
int openmpt_module_set_repeat_count( openmpt_module * mod, int32 repeat_count );
/*! \brief Get Repeat Count
 *
 * \param mod The module handle to work on.
 * \return Repeat Count
 *   - -1: repeat forever
 *   - 0: play once, repeat zero times (the default)
 *   - n>0: play once and repeat n times after that
 * \sa openmpt_module_set_repeat_count
 */
int32 openmpt_module_get_repeat_count( openmpt_module * mod );

/*! \brief approximate song duration
 *
 * \param mod The module handle to work on.
 * \return Approximate duration of current sub-song in seconds.
 */
double openmpt_module_get_duration_seconds( openmpt_module * mod );

/*! \brief Set approximate current song position
 *
 * \param mod The module handle to work on.
 * \param seconds Seconds to seek to. If seconds is out of range, the position gets set to song start or end respectively.
 * \return Approximate new song position in seconds.
 * \sa openmpt_module_get_position_seconds
 */
double openmpt_module_set_position_seconds( openmpt_module * mod, double seconds );
/*! \brief Get current song position
 *
 * \param mod The module handle to work on.
 * \return Current song position in seconds.
 * \sa openmpt_module_set_position_seconds
 */
double openmpt_module_get_position_seconds( openmpt_module * mod );

/*! \brief Set approximate current song position
 *
 * If order or row are out of range, to position is not modified and the current position is returned.
 * \param mod The module handle to work on.
 * \param order Pattern order number to seek to.
 * \param row Pattern row number to seek to.
 * \return Approximate new song position in seconds.
 * \sa openmpt_module_set_position_seconds
 * \sa openmpt_module_get_position_seconds
 */
double openmpt_module_set_position_order_row( openmpt_module * mod, int32 order, int32 row );

/*! \brief Get render parameter
 *
 * \param mod The module handle to work on.
 * \param param Parameter to query. See \ref openmpt_module_render_param
 * \param value Pointer to the variable that receives the current value of the parameter.
 * \return 1 on success, 0 on failure (invalid param or value is NULL).
 * \sa OPENMPT_MODULE_RENDER_MASTERGAIN_MILLIBEL
 * \sa OPENMPT_MODULE_RENDER_STEREOSEPARATION_PERCENT
 * \sa OPENMPT_MODULE_RENDER_INTERPOLATIONFILTER_LENGTH
 * \sa OPENMPT_MODULE_RENDER_VOLUMERAMPING_STRENGTH
 * \sa openmpt_module_set_render_param
 */
int openmpt_module_get_render_param( openmpt_module * mod, int param, int32 * value );
/*! \brief Set render parameter
 *
 * \param mod The module handle to work on.
 * \param param Parameter to set. See \ref openmpt_module_render_param
 * \param value The value to set param to.
 * \return 1 on success, 0 on failure (invalid param).
 * \sa OPENMPT_MODULE_RENDER_MASTERGAIN_MILLIBEL
 * \sa OPENMPT_MODULE_RENDER_STEREOSEPARATION_PERCENT
 * \sa OPENMPT_MODULE_RENDER_INTERPOLATIONFILTER_LENGTH
 * \sa OPENMPT_MODULE_RENDER_VOLUMERAMPING_STRENGTH
 * \sa openmpt_module_get_render_param
 */
int openmpt_module_set_render_param( openmpt_module * mod, int param, int32 value );

/*@{*/
/*! \brief Render audio data
 *
 * \param mod The module handle to work on.
 * \param samplerate Sample rate to render output. Should be in [8000,192000], but this is not enforced.
 * \param count Number of audio frames to render per channel.
 * \param mono Pointer to a buffer of at least count elements that receives the mono/center output.
 * \return The number of frames actually rendered.
 * \retval 0 The end of song has been reached.
 * \remarks The output buffers are only written to up to the returned number of elements.
 * \remarks You can freely switch between any of the "openmpt_module_read*" variants if you see a need to do so. libopenmpt tries to introduce as little switching annoyances as possible. Normally, you would only use a single one of these functions for rendering a particular module.
 * \remarks It is recommended to use the floating point API because of the greater dynamic range and no implied clipping.
 * \sa \ref libopenmpt_c_outputformat
 */
size_t openmpt_module_read_mono(   openmpt_module * mod, int32 samplerate, size_t count, int16_t * mono );
/*! \brief Render audio data
 *
 * \param mod The module handle to work on.
 * \param samplerate Sample rate to render output. Should be in [8000,192000], but this is not enforced.
 * \param count Number of audio frames to render per channel.
 * \param left Pointer to a buffer of at least count elements that receives the left output.
 * \param right Pointer to a buffer of at least count elements that receives the right output.
 * \return The number of frames actually rendered.
 * \retval 0 The end of song has been reached.
 * \remarks The output buffers are only written to up to the returned number of elements.
 * \remarks You can freely switch between any of the "openmpt_module_read*" variants if you see a need to do so. libopenmpt tries to introduce as little switching annoyances as possible. Normally, you would only use a single one of these functions for rendering a particular module.
 * \remarks It is recommended to use the floating point API because of the greater dynamic range and no implied clipping.
 * \sa \ref libopenmpt_c_outputformat
 */
size_t openmpt_module_read_stereo( openmpt_module * mod, int32 samplerate, size_t count, int16_t * left, int16_t * right );
/*! \brief Render audio data
 *
 * \param mod The module handle to work on.
 * \param samplerate Sample rate to render output. Should be in [8000,192000], but this is not enforced.
 * \param count Number of audio frames to render per channel.
 * \param left Pointer to a buffer of at least count elements that receives the left output.
 * \param right Pointer to a buffer of at least count elements that receives the right output.
 * \param rear_left Pointer to a buffer of at least count elements that receives the rear left output.
 * \param rear_right Pointer to a buffer of at least count elements that receives the rear right output.
 * \return The number of frames actually rendered.
 * \retval 0 The end of song has been reached.
 * \remarks The output buffers are only written to up to the returned number of elements.
 * \remarks You can freely switch between any of the "openmpt_module_read*" variants if you see a need to do so. libopenmpt tries to introduce as little switching annoyances as possible. Normally, you would only use a single one of these functions for rendering a particular module.
 * \remarks It is recommended to use the floating point API because of the greater dynamic range and no implied clipping.
 * \sa \ref libopenmpt_c_outputformat
 */
size_t openmpt_module_read_quad(   openmpt_module * mod, int32 samplerate, size_t count, int16_t * left, int16_t * right, int16_t * rear_left, int16_t * rear_right );
/*! \brief Render audio data
 *
 * \param mod The module handle to work on.
 * \param samplerate Sample rate to render output. Should be in [8000,192000], but this is not enforced.
 * \param count Number of audio frames to render per channel.
 * \param mono Pointer to a buffer of at least count elements that receives the mono/center output.
 * \return The number of frames actually rendered.
 * \retval 0 The end of song has been reached.
 * \remarks The output buffers are only written to up to the returned number of elements.
 * \remarks You can freely switch between any of the "openmpt_module_read*" variants if you see a need to do so. libopenmpt tries to introduce as little switching annoyances as possible. Normally, you would only use a single one of these functions for rendering a particular module.
 * \remarks Floating point samples are in the [-1.0..1.0] nominal range. They are not clipped to that range though and thus might overshoot.
 * \sa \ref libopenmpt_c_outputformat
 */
size_t openmpt_module_read_float_mono(   openmpt_module * mod, int32 samplerate, size_t count, float * mono );
/*! \brief Render audio data
 *
 * \param mod The module handle to work on.
 * \param samplerate Sample rate to render output. Should be in [8000,192000], but this is not enforced.
 * \param count Number of audio frames to render per channel.
 * \param left Pointer to a buffer of at least count elements that receives the left output.
 * \param right Pointer to a buffer of at least count elements that receives the right output.
 * \return The number of frames actually rendered.
 * \retval 0 The end of song has been reached.
 * \remarks The output buffers are only written to up to the returned number of elements.
 * \remarks You can freely switch between any of the "openmpt_module_read*" variants if you see a need to do so. libopenmpt tries to introduce as little switching annoyances as possible. Normally, you would only use a single one of these functions for rendering a particular module.
 * \remarks Floating point samples are in the [-1.0..1.0] nominal range. They are not clipped to that range though and thus might overshoot.
 * \sa \ref libopenmpt_c_outputformat
 */
size_t openmpt_module_read_float_stereo( openmpt_module * mod, int32 samplerate, size_t count, float * left, float * right );
/*! \brief Render audio data
 *
 * \param mod The module handle to work on.
 * \param samplerate Sample rate to render output. Should be in [8000,192000], but this is not enforced.
 * \param count Number of audio frames to render per channel.
 * \param left Pointer to a buffer of at least count elements that receives the left output.
 * \param right Pointer to a buffer of at least count elements that receives the right output.
 * \param rear_left Pointer to a buffer of at least count elements that receives the rear left output.
 * \param rear_right Pointer to a buffer of at least count elements that receives the rear right output.
 * \return The number of frames actually rendered.
 * \retval 0 The end of song has been reached.
 * \remarks The output buffers are only written to up to the returned number of elements.
 * \remarks You can freely switch between any of the "openmpt_module_read*" variants if you see a need to do so. libopenmpt tries to introduce as little switching annoyances as possible. Normally, you would only use a single one of these functions for rendering a particular module.
 * \remarks Floating point samples are in the [-1.0..1.0] nominal range. They are not clipped to that range though and thus might overshoot.
 * \sa \ref libopenmpt_c_outputformat
 */
size_t openmpt_module_read_float_quad(   openmpt_module * mod, int32 samplerate, size_t count, float * left, float * right, float * rear_left, float * rear_right );
/*! \brief Render audio data
 *
 * \param mod The module handle to work on.
 * \param samplerate Sample rate to render output. Should be in [8000,192000], but this is not enforced.
 * \param count Number of audio frames to render per channel.
 * \param interleaved_stereo Pointer to a buffer of at least count*2 elements that receives the interleaved stereo output in the order (L,R).
 * \return The number of frames actually rendered.
 * \retval 0 The end of song has been reached.
 * \remarks The output buffers are only written to up to the returned number of elements.
 * \remarks You can freely switch between any of the "openmpt_module_read*" variants if you see a need to do so. libopenmpt tries to introduce as little switching annoyances as possible. Normally, you would only use a single one of these functions for rendering a particular module.
 * \remarks It is recommended to use the floating point API because of the greater dynamic range and no implied clipping.
 * \sa \ref libopenmpt_c_outputformat
 */
size_t openmpt_module_read_interleaved_stereo( openmpt_module * mod, int32 samplerate, size_t count, int16_t * interleaved_stereo );
/*! \brief Render audio data
 *
 * \param mod The module handle to work on.
 * \param samplerate Sample rate to render output. Should be in [8000,192000], but this is not enforced.
 * \param count Number of audio frames to render per channel.
 * \param interleaved_quad Pointer to a buffer of at least count*4 elements that receives the interleaved suad surround output in the order (L,R,RL,RR).
 * \return The number of frames actually rendered.
 * \retval 0 The end of song has been reached.
 * \remarks The output buffers are only written to up to the returned number of elements.
 * \remarks You can freely switch between any of the "openmpt_module_read*" variants if you see a need to do so. libopenmpt tries to introduce as little switching annoyances as possible. Normally, you would only use a single one of these functions for rendering a particular module.
 * \remarks It is recommended to use the floating point API because of the greater dynamic range and no implied clipping.
 * \sa \ref libopenmpt_c_outputformat
 */
size_t openmpt_module_read_interleaved_quad(   openmpt_module * mod, int32 samplerate, size_t count, int16_t * interleaved_quad   );
/*! \brief Render audio data
 *
 * \param mod The module handle to work on.
 * \param samplerate Sample rate to render output. Should be in [8000,192000], but this is not enforced.
 * \param count Number of audio frames to render per channel.
 * \param interleaved_stereo Pointer to a buffer of at least count*2 elements that receives the interleaved stereo output in the order (L,R).
 * \return The number of frames actually rendered.
 * \retval 0 The end of song has been reached.
 * \remarks The output buffers are only written to up to the returned number of elements.
 * \remarks You can freely switch between any of the "openmpt_module_read*" variants if you see a need to do so. libopenmpt tries to introduce as little switching annoyances as possible. Normally, you would only use a single one of these functions for rendering a particular module.
 * \remarks Floating point samples are in the [-1.0..1.0] nominal range. They are not clipped to that range though and thus might overshoot.
 * \sa \ref libopenmpt_c_outputformat
 */
size_t openmpt_module_read_interleaved_float_stereo( openmpt_module * mod, int32 samplerate, size_t count, float * interleaved_stereo );
/*! \brief Render audio data
 *
 * \param mod The module handle to work on.
 * \param samplerate Sample rate to render output. Should be in [8000,192000], but this is not enforced.
 * \param count Number of audio frames to render per channel.
 * \param interleaved_quad Pointer to a buffer of at least count*4 elements that receives the interleaved suad surround output in the order (L,R,RL,RR).
 * \return The number of frames actually rendered.
 * \retval 0 The end of song has been reached.
 * \remarks The output buffers are only written to up to the returned number of elements.
 * \remarks You can freely switch between any of the "openmpt_module_read*" variants if you see a need to do so. libopenmpt tries to introduce as little switching annoyances as possible. Normally, you would only use a single one of these functions for rendering a particular module.
 * \remarks Floating point samples are in the [-1.0..1.0] nominal range. They are not clipped to that range though and thus might overshoot.
 * \sa \ref libopenmpt_c_outputformat
*/
size_t openmpt_module_read_interleaved_float_quad(   openmpt_module * mod, int32 samplerate, size_t count, float * interleaved_quad   );
/*@}*/

/*! \brief Get the list of supported metadata item keys
 *
 * \param mod The module handle to work on.
 * \return Metadata item keys supported by openmpt_module_get_metadata, as a semicolon-separated list.
 * \sa openmpt_module_get_metadata
 */
const char * openmpt_module_get_metadata_keys( openmpt_module * mod );
/*! \brief Get a metadata item value
 *
 * \param mod The module handle to work on.
 * \param key Metadata item key to query. Use openmpt_module_get_metadata_keys to check for available keys.
 *          Possible keys are:
 *          - type: Module format extension (e.g. it)
 *          - type_long: Tracker name associated with the module format (e.g. Impulse Tracker)
 *          - container: Container format the module file is embedded in, if any (e.g. umx)
 *          - container_long: Full container name if the module is embedded in a container (e.g. Unreal Music)
 *          - tracker: Tracker that was (most likely) used to save the module file, if known
 *          - artist: Author of the module
 *          - title: Module title
 *          - date: Date the module was last saved, in ISO-8601 format.
 *          - message: Song message. If the song message is empty or the module format does not support song messages, a list of instrument and sample names is returned instead.
 *          - message_raw: Song message. If the song message is empty or the module format does not support song messages, an empty string is returned.
 *          - warnings: A list of warnings that were generated while loading the module.
 * \return The associated value for key.
 * \sa openmpt_module_get_metadata_keys
 */
const char * openmpt_module_get_metadata( openmpt_module * mod, const char * key );

/*! \brief Get the current speed
 *
 * \param mod The module handle to work on.
 * \return The current speed in ticks per row.
 */
int32 openmpt_module_get_current_speed( openmpt_module * mod );
/*! \brief Get the current tempo
 *
 * \param mod The module handle to work on.
 * \return The current tempo in tracker units. The exact meaning of this value depends on the tempo mode being used.
 */
int32 openmpt_module_get_current_tempo( openmpt_module * mod );
/*! \brief Get the current order
 *
 * \param mod The module handle to work on.
 * \return The current order at which the module is being played back.
 */
int32 openmpt_module_get_current_order( openmpt_module * mod );
/*! \brief Get the current pattern
 *
 * \param mod The module handle to work on.
 * \return The current pattern that is being played.
 */
int32 openmpt_module_get_current_pattern( openmpt_module * mod );
/*! \brief Get the current row
 *
 * \param mod The module handle to work on.
 * \return The current row at which the current pattern is being played.
 */
int32 openmpt_module_get_current_row( openmpt_module * mod );
/*! \brief Get the current amount of playing channels.
 *
 * \param mod The module handle to work on.
 * \return The amount of sample channels that are currently being rendered.
 */
int32 openmpt_module_get_current_playing_channels( openmpt_module * mod );

/*! \brief Get an approximate indication of the channel volume.
 *
 * \param mod The module handle to work on.
 * \param channel The channel whose volume should be retrieved.
 * \return The approximate channel volume.
 * \remarks The returned value is solely based on the note velocity and does not take the actual waveform of the playing sample into account.
 */
float openmpt_module_get_current_channel_vu_mono( openmpt_module * mod, int32 channel );
/*! \brief Get an approximate indication of the channel volume on the front-left speaker.
 *
 * \param mod The module handle to work on.
 * \param channel The channel whose volume should be retrieved.
 * \return The approximate channel volume.
 * \remarks The returned value is solely based on the note velocity and does not take the actual waveform of the playing sample into account.
 */
float openmpt_module_get_current_channel_vu_left( openmpt_module * mod, int32 channel );
/*! \brief Get an approximate indication of the channel volume on the front-right speaker.
 *
 * \param mod The module handle to work on.
 * \param channel The channel whose volume should be retrieved.
 * \return The approximate channel volume.
 * \remarks The returned value is solely based on the note velocity and does not take the actual waveform of the playing sample into account.
 */
float openmpt_module_get_current_channel_vu_right( openmpt_module * mod, int32 channel );
/*! \brief Get an approximate indication of the channel volume on the rear-left speaker.
 *
 * \param mod The module handle to work on.
 * \param channel The channel whose volume should be retrieved.
 * \return The approximate channel volume.
 * \remarks The returned value is solely based on the note velocity and does not take the actual waveform of the playing sample into account.
 */
float openmpt_module_get_current_channel_vu_rear_left( openmpt_module * mod, int32 channel );
/*! \brief Get an approximate indication of the channel volume on the rear-right speaker.
 *
 * \param mod The module handle to work on.
 * \param channel The channel whose volume should be retrieved.
 * \return The approximate channel volume.
 * \remarks The returned value is solely based on the note velocity and does not take the actual waveform of the playing sample into account.
 */
float openmpt_module_get_current_channel_vu_rear_right( openmpt_module * mod, int32 channel );

/*! \brief Get the number of sub-songs
 *
 * \param mod The module handle to work on.
 * \return The number of sub-songs in the module. This includes any "hidden" songs (songs that share the same sequence, but start at different order indices) and "normal" sub-songs or "sequences" (if the format supports them).
 * \sa openmpt_module_get_subsong_name, openmpt_module_select_subsong, openmpt_module_get_selected_subsong
 */
int32 openmpt_module_get_num_subsongs( openmpt_module * mod );
/*! \brief Get the number of pattern channels
 *
 * \param mod The module handle to work on.
 * \return The number of pattern channels in the module. Not all channels do necessarily contain data.
 * \remarks The number of pattern channels is completely independent of the number of output channels. libopenmpt can render modules in mono, stereo or quad surround, but the choice of which of the three modes to use must not be made based on the return value of this function, which may be any positive integer amount. Only use this function for informational purposes.
 */
int32 openmpt_module_get_num_channels( openmpt_module * mod );
/*! \brief Get the number of orders
 *
 * \param mod The module handle to work on.
 * \return The number of orders in the current sequence of the module.
 */
int32 openmpt_module_get_num_orders( openmpt_module * mod );
/*! \brief Get the number of patterns
 *
 * \param mod The module handle to work on.
 * \return The number of distinct patterns in the module.
 */
int32 openmpt_module_get_num_patterns( openmpt_module * mod );
/*! \brief Get the number of instruments
 *
 * \param mod The module handle to work on.
 * \return The number of instrument slots in the module. Instruments are a layer on top of samples, and are not supported by all module formats.
 */
int32 openmpt_module_get_num_instruments( openmpt_module * mod );
/*! \brief Get the number of samples
 *
 * \param mod The module handle to work on.
 * \return The number of sample slots in the module.
 */
int32 openmpt_module_get_num_samples( openmpt_module * mod );

/*! \brief Get a sub-song name
 *
 * \param mod The module handle to work on.
 * \param index The sub-song whose name should be retrieved
 * \return The sub-song name.
 * \sa openmpt_module_get_num_subsongs, openmpt_module_select_subsong, openmpt_module_get_selected_subsong
 */
const char * openmpt_module_get_subsong_name( openmpt_module * mod, int32 index );
/*! \brief Get a channel name
 *
 * \param mod The module handle to work on.
 * \param index The channel whose name should be retrieved
 * \return The channel name.
 * \sa openmpt_module_get_num_channels
 */
const char * openmpt_module_get_channel_name( openmpt_module * mod, int32 index );
/*! \brief Get an order name
 *
 * \param mod The module handle to work on.
 * \param index The order whose name should be retrieved
 * \return The order name.
 * \sa openmpt_module_get_num_orders
 */
const char * openmpt_module_get_order_name( openmpt_module * mod, int32 index );
/*! \brief Get a pattern name
 *
 * \param mod The module handle to work on.
 * \param index The pattern whose name should be retrieved
 * \return The pattern name.
 * \sa openmpt_module_get_num_patterns
 */
const char * openmpt_module_get_pattern_name( openmpt_module * mod, int32 index );
/*! \brief Get an instrument name
 *
 * \param mod The module handle to work on.
 * \param index The instrument whose name should be retrieved
 * \return The instrument name.
 * \sa openmpt_module_get_num_instruments
 */
const char * openmpt_module_get_instrument_name( openmpt_module * mod, int32 index );
/*! \brief Get a sample name
 *
 * \param mod The module handle to work on.
 * \param index The sample whose name should be retrieved
 * \return The sample name.
 * \sa openmpt_module_get_num_samples
 */
const char * openmpt_module_get_sample_name( openmpt_module * mod, int32 index );

/*! \brief Get pattern at order position
 *
 * \param mod The module handle to work on.
 * \param order The order item whose pattern index should be retrieved.
 * \return The pattern index found at the given order position of the current sequence.
 */
int32 openmpt_module_get_order_pattern( openmpt_module * mod, int32 order );
/*! \brief Get the number of rows in a pattern
 *
 * \param mod The module handle to work on.
 * \param pattern The pattern whose row count should be retrieved.
 * \return The number of rows in the given pattern. If the pattern does not exist, 0 is returned.
 */
int32 openmpt_module_get_pattern_num_rows( openmpt_module * mod, int32 pattern );

/*! \brief Get raw pattern content
 *
 * \param mod The module handle to work on.
 * \param pattern The pattern whose data should be retrieved.
 * \param row The row from which the data should be retrieved.
 * \param channel The channel from which the data should be retrieved.
 * \param command The cell index at which the data should be retrieved. See \ref openmpt_module_command_index
 * \return The internal, raw pattern data at the given pattern position.
 */
uint8_t openmpt_module_get_pattern_row_channel_command( openmpt_module * mod, int32 pattern, int32 row, int32 channel, int command );

/*! \brief Get formatted (human-readable) pattern content
 *
 * \param mod The module handle to work on.
 * \param pattern The pattern whose data should be retrieved.
 * \param row The row from which the data should be retrieved.
 * \param channel The channel from which the data should be retrieved.
 * \param command The cell index at which the data should be retrieved.
 * \return The formatted pattern data at the given pattern position. See \ref openmpt_module_command_index
 * \sa openmpt_module_highlight_pattern_row_channel_command
 */
const char * openmpt_module_format_pattern_row_channel_command( openmpt_module * mod, int32 pattern, int32 row, int32 channel, int command );
/*! \brief Get highlighting information for formatted pattern content
 *
 * \param mod The module handle to work on.
 * \param pattern The pattern whose data should be retrieved.
 * \param row The row from which the data should be retrieved.
 * \param channel The channel from which the data should be retrieved.
 * \param command The cell index at which the data should be retrieved. See \ref openmpt_module_command_index
 * \return The highlighting string for the formatted pattern data as retrieved by openmpt_module_get_pattern_row_channel_command at the given pattern position.
 * \remarks The returned string will map each character position of the string returned by openmpt_module_get_pattern_row_channel_command to a highlighting instruction.
 *          Possible highlighting characters are:
 *          - " " : empty/space
 *          - "." : empty/dot
 *          - "n" : generic note
 *          - "m" : special note
 *          - "i" : generic instrument
 *          - "u" : generic volume column effect
 *          - "v" : generic volume column parameter
 *          - "e" : generic effect column effect
 *          - "f" : generic effect column parameter
 * \sa openmpt_module_get_pattern_row_channel_command
 */
const char * openmpt_module_highlight_pattern_row_channel_command( openmpt_module * mod, int32 pattern, int32 row, int32 channel, int command );

/*! \brief Get formatted (human-readable) pattern content
 *
 * \param mod The module handle to work on.
 * \param pattern The pattern whose data should be retrieved.
 * \param row The row from which the data should be retrieved.
 * \param channel The channel from which the data should be retrieved.
 * \param width The maximum number of characters the string should contain. 0 means no limit.
 * \param pad If true, the string will be resized to the exact length provided in the width parameter.
 * \return The formatted pattern data at the given pattern position.
 * \sa openmpt_module_highlight_pattern_row_channel
 */
const char * openmpt_module_format_pattern_row_channel( openmpt_module * mod, int32 pattern, int32 row, int32 channel, size_t width, int pad );
/*! \brief Get highlighting information for formatted pattern content
 *
 * \param mod The module handle to work on.
 * \param pattern The pattern whose data should be retrieved.
 * \param row The row from which the data should be retrieved.
 * \param channel The channel from which the data should be retrieved.
 * \param width The maximum number of characters the string should contain. 0 means no limit.
 * \param pad If true, the string will be resized to the exact length provided in the width parameter.
 * \return The highlighting string for the formatted pattern data as retrieved by openmpt_module_format_pattern_row_channel at the given pattern position.
 * \sa openmpt_module_format_pattern_row_channel
 */
const char * openmpt_module_highlight_pattern_row_channel( openmpt_module * mod, int32 pattern, int32 row, int32 channel, size_t width, int pad );

/*! \brief Retrieve supported ctl keys
 *
 * \param mod The module handle to work on.
 * \return A semicolon-separated list containing all supported ctl keys.
 * \remarks Currently supported ctl values are:
 *          - load.skip_samples: Set to "1" to avoid loading samples into memory
 *          - load.skip_patterns: Set to "1" to avoid loading patterns into memory
 *          - load.skip_plugins: Set to "1" to avoid loading plugins
 *          - load.skip_subsongs_init: Set to "1" to avoid pre-initializing sub-songs. Skipping results in faster module loading but slower seeking.
 *          - seek.sync_samples: Set to "1" to sync sample playback when using openmpt_module_set_position_seconds or openmpt_module_set_position_order_row.
 *          - subsong: The current subsong. Setting it has identical semantics as openmpt_module_select_subsong(), getting it returns the currently selected subsong.
 *          - play.tempo_factor: Set a floating point tempo factor. "1.0" is the default tempo.
 *          - play.pitch_factor: Set a floating point pitch factor. "1.0" is the default pitch.
 *          - render.resampler.emulate_amiga: Set to "1" to enable the Amiga resampler for Amiga modules. This emulates the sound characteristics of the Paula chip and overrides the selected interpolation filter. Non-Amiga module formats are not affected by this setting. 
 *          - dither: Set the dither algorithm that is used for the 16 bit versions of openmpt_module_read. Supported values are:
 *                    - 0: No dithering.
 *                    - 1: Default mode. Chosen by OpenMPT code, might change.
 *                    - 2: Rectangular, 0.5 bit depth, no noise shaping (original ModPlug Tracker).
 *                    - 3: Rectangular, 1 bit depth, simple 1st order noise shaping
 */
const char * openmpt_module_get_ctls( openmpt_module * mod );
/*! \brief Get current ctl value
 *
 * \param mod The module handle to work on.
 * \param ctl The ctl key whose value should be retrieved.
 * \return The associated ctl value, or NULL on failure.
 * \sa openmpt_module_get_ctls
 */
const char * openmpt_module_ctl_get( openmpt_module * mod, const char * ctl );
/*! \brief Set ctl value
 *
 * \param mod The module handle to work on.
 * \param ctl The ctl key whose value should be set.
 * \param value The value that should be set.
 * \return 1 if successful, 0 in case the value is not sensible (e.g. negative tempo factor) or the ctl is not recognized.
 * \sa openmpt_module_get_ctls
 */
int openmpt_module_ctl_set( openmpt_module * mod, const char * ctl, const char * value );
#endif
